{"version":3,"sources":["components/BrailleToLatin/BrailleToLatin.module.scss","components/CaesarShift/CaesarShift.module.scss","containers/App/App.module.scss","components/Navigation/Navigation.module.scss","components/Navigation/Navigation.js","components/Navigation/index.js","constants/index.js","containers/App/App.js","components/BrailleToLatin/BrailleToLatin.utils.js","components/BrailleToLatin/BrailleToLatin.js","components/BrailleToLatin/index.js","components/CaesarShift/CaesarShift.utils.js","components/CaesarShift/CaesarShift.js","components/CaesarShift/index.js","containers/App/index.js","containers/App/App.enhancer.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","selectBraille","selectCaesarShift","selectedSolver","themeColor","className","classes","container","type","onClick","App","SolverComponent","style","backgroundColor","safeWorkingArea","brailleToLatin","getBinary","val","Checkdot","valX","setValX","value","stateHandler","onChange","BrailleToLatin","useState","val0","setVal0","val1","setVal1","val2","setVal2","val3","setVal3","val4","setVal4","val5","setVal5","result","setResult","inputs","id","checkdot","e","preventDefault","fullVal","join","color","alphaIndexes","alphaArray","CaesarShift","letter","setLetter","symbol","setSymbol","count","setCount","label","target","uppercaseLetter","toUpperCase","operatedIndex","finalIndex","length","newLetter","Number","isNaN","enhancer","compose","withStateHandlers","selectMorse","selectSemaphore","withProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,OAAS,+BAA+B,SAAW,iCAAiC,cAAgB,sCAAsC,UAAY,kCAAkC,kBAAoB,0CAA0C,kBAAoB,0CAA0C,OAAS,+BAA+B,IAAM,4BAA4B,UAAY,kCAAkC,OAAS,iC,gBCA/fD,EAAOC,QAAU,CAAC,eAAiB,oCAAoC,OAAS,4BAA4B,cAAgB,mCAAmC,UAAY,+BAA+B,kBAAoB,uCAAuC,kBAAoB,uCAAuC,OAAS,4BAA4B,IAAM,yBAAyB,UAAY,+BAA+B,MAAQ,6B,mBCAvbD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,gBAAkB,+B,mBCAvED,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,OAAS,2BAA2B,cAAgB,kCAAkC,UAAY,8BAA8B,kBAAoB,sCAAsC,kBAAoB,sCAAsC,OAAS,2BAA2B,IAAM,wBAAwB,UAAY,gC,6JCoCzXC,ICnCAA,EDMf,YAEI,IADFC,EACC,EADDA,cAAeC,EACd,EADcA,kBAAmBC,EACjC,EADiCA,eAElC,OADC,EADiDC,WAGhD,yBAAKC,UAAWC,IAAQC,WACtB,4BACEC,KAAK,SACLH,UEfsB,YFeXF,EAAoC,oBAAsB,YACrEM,QAASR,GAHX,WAOA,4BACEO,KAAK,SACLH,UEnB2B,gBFmBhBF,EAAyC,oBAAsB,YAC1EM,QAASP,GAHX,kB,gBGcSQ,MA7Bf,YAMI,IALFC,EAKC,EALDA,gBACAP,EAIC,EAJDA,WACAH,EAGC,EAHDA,cACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,eAEA,OACE,yBAAKE,UAAWC,IAAQC,UAAWK,MAAO,CAAEC,gBAAiBT,IAC3D,yBAAKC,UAAWC,IAAQQ,iBACtB,kBAAC,EAAD,CACEb,cAAeA,EACfC,kBAAmBA,EACnBC,eAAgBA,IAElB,kBAACQ,EAAD,CAAiBP,WAAYA,O,cCpBxBW,EAAiB,CAC5B,IAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,MAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,KAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,MAAU,IACV,OAAU,IACV,OAAU,IACV,OAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,KAGCC,EAAY,SAACC,GAAD,OAAUA,EAAM,EAAI,G,gBCtB7C,SAASC,EAAT,GAAuD,IAFjCC,EAAMC,EAERC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,aAAcjB,EAAa,EAAbA,UACvC,OACE,2BAAOA,UAAWA,EAAWG,KAAK,WAAWa,MAAOA,EAAOE,UAJzCJ,EAIgEE,EAJ1DD,EAIiEE,EAJrD,kBAAMF,EAAQJ,GAAWG,QAwElDK,IC3EAA,EDWf,YAAyC,IAAfpB,EAAc,EAAdA,WAAc,EACdqB,mBAAS,GADK,mBAC/BC,EAD+B,KACzBC,EADyB,OAEdF,mBAAS,GAFK,mBAE/BG,EAF+B,KAEzBC,EAFyB,OAGdJ,mBAAS,GAHK,mBAG/BK,EAH+B,KAGzBC,EAHyB,OAIdN,mBAAS,GAJK,mBAI/BO,EAJ+B,KAIzBC,EAJyB,OAKdR,mBAAS,GALK,mBAK/BS,EAL+B,KAKzBC,EALyB,OAMdV,mBAAS,GANK,mBAM/BW,EAN+B,KAMzBC,EANyB,OAQVZ,mBAAS,IARC,mBAQ/Ba,EAR+B,KAQvBC,EARuB,KA0BtC,OACE,yBAAKlC,UAAWC,IAAQC,WACtB,8CACA,uBAAGF,UAAU,UAAUiC,GACvB,yBAAKjC,UAAWC,IAAQkC,QACtB,0BAAMC,GAAG,gBACP,yBAAKpC,UAAU,OACb,kBAACa,EAAD,CAAUG,MAAOe,EAAMd,aAAce,EAAShC,UAAWC,IAAQoC,WACjE,kBAACxB,EAAD,CAAUG,MAAOa,EAAMZ,aAAca,EAAS9B,UAAWC,IAAQoC,YAEnE,yBAAKrC,UAAU,OACb,kBAACa,EAAD,CAAUG,MAAOW,EAAMV,aAAcW,EAAS5B,UAAWC,IAAQoC,WACjE,kBAACxB,EAAD,CAAUG,MAAOS,EAAMR,aAAcS,EAAS1B,UAAWC,IAAQoC,YAEnE,yBAAKrC,UAAU,OACb,kBAACa,EAAD,CAAUG,MAAOO,EAAMN,aAAcO,EAASxB,UAAWC,IAAQoC,WACjE,kBAACxB,EAAD,CAAUG,MAAOK,EAAMJ,aAAcK,EAAStB,UAAWC,IAAQoC,YAEnE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,gBAAgBG,KAAK,QAAQC,QA7BrC,WAClBkB,GAAQ,GACRE,GAAQ,GACRE,GAAQ,GACRE,GAAQ,GACRE,GAAQ,GACRE,GAAQ,GACRE,EAAU,MAsBF,SACA,4BAAQ/B,KAAK,SAASC,QApCd,SAACkC,GACjBA,EAAEC,iBACF,IAAMC,EAAU,CAACT,EAAMF,EAAMF,EAAMF,EAAMF,EAAMF,GAAMoB,KAAK,IAC1DP,EAAUxB,EAAe8B,IAAY,QAiCajC,MAAO,CAAEmC,MAAO3C,IAA1D,eE3DC4C,EAAe,CAC1B,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,IAGMC,EAAa,CACxB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,K,gBCGaC,ICxDAA,EDEf,YAAsC,IAAf9C,EAAc,EAAdA,WAAc,EACPqB,mBAAS,IADF,mBAC5B0B,EAD4B,KACpBC,EADoB,OAEP3B,mBAAS,KAFF,mBAE5B4B,EAF4B,KAEpBC,EAFoB,OAGT7B,mBAAS,IAHA,mBAG5B8B,EAH4B,KAGrBC,EAHqB,OAIP/B,mBAAS,IAJF,mBAI5Ba,EAJ4B,KAIpBC,EAJoB,KAwBnC,OACE,yBAAKlC,UAAWC,IAAQC,WACtB,4CACA,uBAAGF,UAAU,UAAUiC,GACvB,yBAAKjC,UAAWC,IAAQkC,QACtB,0BAAMC,GAAG,qBACP,yBAAKpC,UAAU,OACb,2BAAOA,UAAWC,IAAQmD,OACxB,2BAAOjD,KAAK,OAAOa,MAAO8B,EAAQ5B,SAAU,SAACoB,GAAD,OAAOS,EAAUT,EAAEe,OAAOrC,WAExE,2BAAOhB,UAAWC,IAAQmD,OACxB,4BAAQpC,MAAOgC,EAAQ9B,SAAU,SAACoB,GAAD,OAAOW,EAAUX,EAAEe,OAAOrC,SACzD,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGJ,2BAAOhB,UAAWC,IAAQmD,OACxB,2BAAOjD,KAAK,OAAOa,MAAOkC,EAAOhC,SAAU,SAACoB,GAAD,OAAOa,EAASb,EAAEe,OAAOrC,YAGxE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,gBAAgBG,KAAK,QAAQC,QA3BrC,WAClB2C,EAAU,IACVE,EAAU,KACVE,EAAS,MAwBD,SACA,4BAAQhD,KAAK,SAASC,QAxCd,SAACkC,GACjBA,EAAEC,iBACF,IAAMe,EAAkBR,EAAOS,cAGzBC,EAFgBb,EAAaW,KAChB,CAACN,EAAQE,GAAOT,KAAK,IAElCgB,EAAaD,EAAgB,EAAIZ,EAAWc,OAASF,EAAgBA,EACrEG,EAAYC,OAAOC,MAAMJ,GAAc,UAAYb,EAAWa,GAEpEvB,EAAUyB,IA+BwCpD,MAAO,CAAEmC,MAAO3C,IAA1D,eE/CG+D,ECOAC,YACbC,YACE,CAAElE,eTT6B,eSU/B,CACEF,cAAe,kBAAM,iBAAO,CAAEE,eTdN,aSexBmE,YAAa,kBAAM,iBAAO,CAAEnE,eTdN,WSetBoE,gBAAiB,kBAAM,iBAAO,CAAEpE,eTdN,eSe1BD,kBAAmB,kBAAM,iBAAO,CAAEC,eTdL,mBSiBjCqE,aAAU,YACR,OADgC,EAArBrE,gBAET,ITtBwB,USuBtB,MAAO,CAAEQ,gBAAiBa,EAAgBpB,WAAY,QACxD,ITrB6B,cSsB3B,MAAO,CAAEO,gBAAiBuC,EAAa9C,WAAY,WACrD,QACE,MAAO,CAAEO,gBAAiBa,EAAgBpB,WAAY,YDxB/C+D,CAASzD,GESJ+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4df1e76f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundedCorners\":\"BrailleToLatin_roundedCorners__1-Lhx\",\"circle\":\"BrailleToLatin_circle__37wHh\",\"checkdot\":\"BrailleToLatin_checkdot__376rk\",\"buttonOutline\":\"BrailleToLatin_buttonOutline__1DTvx\",\"navButton\":\"BrailleToLatin_navButton__1CpG_\",\"navButtonSelected\":\"BrailleToLatin_navButtonSelected__2l_36\",\"navButtonDisabled\":\"BrailleToLatin_navButtonDisabled__2A0i8\",\"result\":\"BrailleToLatin_result__2Vl2o\",\"row\":\"BrailleToLatin_row__30XSL\",\"container\":\"BrailleToLatin_container__wXmAx\",\"inputs\":\"BrailleToLatin_inputs__3LYlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundedCorners\":\"CaesarShift_roundedCorners__1db-F\",\"circle\":\"CaesarShift_circle__1Kpd6\",\"buttonOutline\":\"CaesarShift_buttonOutline__1-Z82\",\"navButton\":\"CaesarShift_navButton__2zvTc\",\"navButtonSelected\":\"CaesarShift_navButtonSelected__oJs-G\",\"navButtonDisabled\":\"CaesarShift_navButtonDisabled__3T1qv\",\"result\":\"CaesarShift_result__1Gf1t\",\"row\":\"CaesarShift_row__2abzs\",\"container\":\"CaesarShift_container__2wKad\",\"label\":\"CaesarShift_label__sYs6C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1SIje\",\"safeWorkingArea\":\"App_safeWorkingArea__2PQKU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundedCorners\":\"Navigation_roundedCorners__hUteF\",\"circle\":\"Navigation_circle__2zZWB\",\"buttonOutline\":\"Navigation_buttonOutline__1KPtS\",\"navButton\":\"Navigation_navButton__xV29H\",\"navButtonSelected\":\"Navigation_navButtonSelected__37Nrv\",\"navButtonDisabled\":\"Navigation_navButtonDisabled__J9vhB\",\"result\":\"Navigation_result__F_STo\",\"row\":\"Navigation_row__33VnU\",\"container\":\"Navigation_container__28f2r\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  SOLVER_CAESAR_SHIFT,\n  SOLVER_BRAILLE,\n} from '../../constants';\nimport classes from './Navigation.module.scss';\n\nfunction Navigation({\n  selectBraille, selectCaesarShift, selectedSolver, themeColor,\n}) {\n  return (\n    <div className={classes.container}>\n      <button\n        type=\"button\"\n        className={selectedSolver === SOLVER_BRAILLE ? 'navButtonSelected' : 'navButton'}\n        onClick={selectBraille}\n      >\n        Braille\n      </button>\n      <button\n        type=\"button\"\n        className={selectedSolver === SOLVER_CAESAR_SHIFT ? 'navButtonSelected' : 'navButton'}\n        onClick={selectCaesarShift}\n      >\n        Caesar Shift\n      </button>\n    </div>\n  );\n}\n\nNavigation.propTypes = {\n  selectBraille: PropTypes.func.isRequired,\n  selectCaesarShift: PropTypes.func.isRequired,\n  selectedSolver: PropTypes.string.isRequired,\n};\n\nexport default Navigation;\n","import Navigation from './Navigation';\n\nexport default Navigation;\n","export const SOLVER_BRAILLE = 'braille';\nexport const SOLVER_MORSE = 'morse';\nexport const SOLVER_SEMAPHORE = 'semaphore';\nexport const SOLVER_CAESAR_SHIFT = 'caesarShift';\n\nexport const solvers = [\n  SOLVER_BRAILLE,\n  SOLVER_MORSE,\n  SOLVER_SEMAPHORE,\n  SOLVER_CAESAR_SHIFT,\n];\n\nexport default {\n  solvers,\n  SOLVER_BRAILLE,\n  SOLVER_MORSE,\n  SOLVER_SEMAPHORE,\n  SOLVER_CAESAR_SHIFT,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Navigation from '../../components/Navigation';\nimport classes from './App.module.scss';\n\nfunction App({\n  SolverComponent,\n  themeColor,\n  selectBraille,\n  selectCaesarShift,\n  selectedSolver,\n}) {\n  return (\n    <div className={classes.container} style={{ backgroundColor: themeColor }}>\n      <div className={classes.safeWorkingArea}>\n        <Navigation\n          selectBraille={selectBraille}\n          selectCaesarShift={selectCaesarShift}\n          selectedSolver={selectedSolver}\n        />\n        <SolverComponent themeColor={themeColor} />\n      </div>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  SolverComponent: PropTypes.func.isRequired,\n  themeColor: PropTypes.string,\n  selectBraille: PropTypes.func.isRequired,\n  selectCaesarShift: PropTypes.func.isRequired,\n  selectedSolver: PropTypes.func.isRequired,\n};\n\nexport default App;\n","export const brailleToLatin = {\n  '100000': 'A',\n  '100010': 'K',\n  '100011': 'U',\n  '100100': 'E',\n  '100110': 'O',\n  '100111': 'Z',\n  '101000': 'B',\n  '101010': 'L',\n  '101011': 'V',\n  '101100': 'H',\n  '101110': 'R',\n  '110000': 'C',\n  '110010': 'M',\n  '110011': 'X',\n  '110100': 'D',\n  '110110': 'N',\n  '110111': 'Y',\n  '111000': 'F',\n  '111010': 'P',\n  '111100': 'G',\n  '111110': 'Q',\n  '011000': 'I',\n  '011100': 'J',\n  '011010': 'S',\n  '011110': 'T',\n  '011101': 'W',\n};\n\nexport const getBinary = (val) => (val ? 1 : 0);\n\nexport default {\n  getBinary,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { brailleToLatin, getBinary } from './BrailleToLatin.utils';\nimport classes from './BrailleToLatin.module.scss';\n\nconst setterGetter = (valX, setValX) => () => setValX(getBinary(!valX));\n\nfunction Checkdot({ value, stateHandler, className }) {\n  return (\n    <input className={className} type=\"checkbox\" value={value} onChange={setterGetter(value, stateHandler)} />\n  );\n}\n\nfunction BrailleToLatin({ themeColor }) {\n  const [val0, setVal0] = useState(0);\n  const [val1, setVal1] = useState(0);\n  const [val2, setVal2] = useState(0);\n  const [val3, setVal3] = useState(0);\n  const [val4, setVal4] = useState(0);\n  const [val5, setVal5] = useState(0);\n\n  const [result, setResult] = useState('');\n\n  const getResult = (e) => {\n    e.preventDefault();\n    const fullVal = [val5, val4, val3, val2, val1, val0].join('');\n    setResult(brailleToLatin[fullVal] || 'n/a');\n  };\n\n  const clearInputs = () => {\n    setVal0(false);\n    setVal1(false);\n    setVal2(false);\n    setVal3(false);\n    setVal4(false);\n    setVal5(false);\n    setResult('');\n  };\n\n  return (\n    <div className={classes.container}>\n      <h1>Braille Solver</h1>\n      <p className=\"result\">{result}</p>\n      <div className={classes.inputs}>\n        <form id=\"braille-form\">\n          <div className=\"row\">\n            <Checkdot value={val5} stateHandler={setVal5} className={classes.checkdot} />\n            <Checkdot value={val4} stateHandler={setVal4} className={classes.checkdot} />\n          </div>\n          <div className=\"row\">\n            <Checkdot value={val3} stateHandler={setVal3} className={classes.checkdot} />\n            <Checkdot value={val2} stateHandler={setVal2} className={classes.checkdot} />\n          </div>\n          <div className=\"row\">\n            <Checkdot value={val1} stateHandler={setVal1} className={classes.checkdot} />\n            <Checkdot value={val0} stateHandler={setVal0} className={classes.checkdot} />\n          </div>\n          <div className=\"row\">\n            <button className=\"buttonOutline\" type=\"reset\" onClick={clearInputs}>Reset</button>\n            <button type=\"submit\" onClick={getResult} style={{ color: themeColor }}>Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nBrailleToLatin.propTypes = {\n  themeColor: PropTypes.string,\n};\n\nCheckdot.propTypes = {\n  value: PropTypes.number.isRequired,\n  stateHandler: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default BrailleToLatin;\n","import BrailleToLatin from './BrailleToLatin';\n\nexport default BrailleToLatin;\n","export const alphaIndexes = {\n  'A': 0,\n  'B': 1,\n  'C': 2,\n  'D': 3,\n  'E': 4,\n  'F': 5,\n  'G': 6,\n  'H': 7,\n  'I': 8,\n  'J': 9,\n  'K': 10,\n  'L': 11,\n  'M': 12,\n  'N': 13,\n  'O': 14,\n  'P': 15,\n  'Q': 16,\n  'R': 17,\n  'S': 18,\n  'T': 19,\n  'U': 20,\n  'V': 21,\n  'W': 22,\n  'X': 23,\n  'Y': 24,\n  'Z': 25,\n};\n\nexport const alphaArray = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n","import React, { useState } from 'react';\nimport { alphaIndexes, alphaArray } from './CaesarShift.utils';\nimport classes from './CaesarShift.module.scss';\n\nfunction CaesarShift({ themeColor }) {\n  const [letter, setLetter] = useState('');\n  const [symbol, setSymbol] = useState('+');\n  const [count, setCount] = useState('');\n  const [result, setResult] = useState('');\n\n  const getResult = (e) => {\n    e.preventDefault();\n    const uppercaseLetter = letter.toUpperCase();\n    const startingIndex = alphaIndexes[uppercaseLetter];\n    const operation = +[symbol, count].join('');\n    const operatedIndex = startingIndex + operation;\n    const finalIndex = operatedIndex < 0 ? alphaArray.length + operatedIndex : operatedIndex;\n    const newLetter = Number.isNaN(finalIndex) ? 'Invalid' : alphaArray[finalIndex];\n\n    setResult(newLetter);\n  };\n\n  const clearInputs = () => {\n    setLetter('');\n    setSymbol('+');\n    setCount('');\n  };\n\n  return (\n    <div className={classes.container}>\n      <h1>Caesar Shift</h1>\n      <p className=\"result\">{result}</p>\n      <div className={classes.inputs}>\n        <form id=\"caesar-shift-form\">\n          <div className=\"row\">\n            <label className={classes.label}>\n              <input type=\"text\" value={letter} onChange={(e) => setLetter(e.target.value)} />\n            </label>\n            <label className={classes.label}>\n              <select value={symbol} onChange={(e) => setSymbol(e.target.value)}>\n                <option value=\"+\">+</option>\n                <option value=\"-\">-</option>\n              </select>\n            </label>\n            <label className={classes.label}>\n              <input type=\"text\" value={count} onChange={(e) => setCount(e.target.value)} />\n            </label>\n          </div>\n          <div className=\"row\">\n            <button className=\"buttonOutline\" type=\"reset\" onClick={clearInputs}>Reset</button>\n            <button type=\"submit\" onClick={getResult} style={{ color: themeColor }}>Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default CaesarShift;\n","import CaesarShift from './CaesarShift';\n\nexport default CaesarShift;\n","import App from './App';\nimport enhancer from './App.enhancer';\n\nexport default enhancer(App);\n","import { compose, withStateHandlers, withProps } from 'recompose';\nimport {\n  SOLVER_BRAILLE,\n  SOLVER_MORSE,\n  SOLVER_SEMAPHORE,\n  SOLVER_CAESAR_SHIFT,\n} from '../../constants';\nimport BrailleToLatin from '../../components/BrailleToLatin';\nimport CaesarShift from '../../components/CaesarShift';\n\nexport default compose(\n  withStateHandlers(\n    { selectedSolver: SOLVER_CAESAR_SHIFT },\n    {\n      selectBraille: () => () => ({ selectedSolver: SOLVER_BRAILLE }),\n      selectMorse: () => () => ({ selectedSolver: SOLVER_MORSE }),\n      selectSemaphore: () => () => ({ selectedSolver: SOLVER_SEMAPHORE }),\n      selectCaesarShift: () => () => ({ selectedSolver: SOLVER_CAESAR_SHIFT }),\n    },\n  ),\n  withProps(({ selectedSolver }) => {\n    switch (selectedSolver) {\n      case SOLVER_BRAILLE:\n        return { SolverComponent: BrailleToLatin, themeColor: 'pink' };\n      case SOLVER_CAESAR_SHIFT:\n        return { SolverComponent: CaesarShift, themeColor: '#c8a2c8' };\n      default:\n        return { SolverComponent: BrailleToLatin, themeColor: 'pink' };\n    }\n  }),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}